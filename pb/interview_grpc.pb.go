// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: interview.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InterviewServiceClient is the client API for InterviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterviewServiceClient interface {
	AddInterview(ctx context.Context, in *AddInterviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetInterview(ctx context.Context, in *GetInterviewRequest, opts ...grpc.CallOption) (*AddInterviewRequest, error)
	GetAllInterviews(ctx context.Context, in *UserInterviewReq, opts ...grpc.CallOption) (InterviewService_GetAllInterviewsClient, error)
}

type interviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterviewServiceClient(cc grpc.ClientConnInterface) InterviewServiceClient {
	return &interviewServiceClient{cc}
}

func (c *interviewServiceClient) AddInterview(ctx context.Context, in *AddInterviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.InterviewService/AddInterview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) GetInterview(ctx context.Context, in *GetInterviewRequest, opts ...grpc.CallOption) (*AddInterviewRequest, error) {
	out := new(AddInterviewRequest)
	err := c.cc.Invoke(ctx, "/user.InterviewService/GetInterview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) GetAllInterviews(ctx context.Context, in *UserInterviewReq, opts ...grpc.CallOption) (InterviewService_GetAllInterviewsClient, error) {
	stream, err := c.cc.NewStream(ctx, &InterviewService_ServiceDesc.Streams[0], "/user.InterviewService/GetAllInterviews", opts...)
	if err != nil {
		return nil, err
	}
	x := &interviewServiceGetAllInterviewsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterviewService_GetAllInterviewsClient interface {
	Recv() (*AddInterviewRequest, error)
	grpc.ClientStream
}

type interviewServiceGetAllInterviewsClient struct {
	grpc.ClientStream
}

func (x *interviewServiceGetAllInterviewsClient) Recv() (*AddInterviewRequest, error) {
	m := new(AddInterviewRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InterviewServiceServer is the server API for InterviewService service.
// All implementations must embed UnimplementedInterviewServiceServer
// for forward compatibility
type InterviewServiceServer interface {
	AddInterview(context.Context, *AddInterviewRequest) (*emptypb.Empty, error)
	GetInterview(context.Context, *GetInterviewRequest) (*AddInterviewRequest, error)
	GetAllInterviews(*UserInterviewReq, InterviewService_GetAllInterviewsServer) error
	mustEmbedUnimplementedInterviewServiceServer()
}

// UnimplementedInterviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterviewServiceServer struct {
}

func (UnimplementedInterviewServiceServer) AddInterview(context.Context, *AddInterviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterview not implemented")
}
func (UnimplementedInterviewServiceServer) GetInterview(context.Context, *GetInterviewRequest) (*AddInterviewRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterview not implemented")
}
func (UnimplementedInterviewServiceServer) GetAllInterviews(*UserInterviewReq, InterviewService_GetAllInterviewsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllInterviews not implemented")
}
func (UnimplementedInterviewServiceServer) mustEmbedUnimplementedInterviewServiceServer() {}

// UnsafeInterviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterviewServiceServer will
// result in compilation errors.
type UnsafeInterviewServiceServer interface {
	mustEmbedUnimplementedInterviewServiceServer()
}

func RegisterInterviewServiceServer(s grpc.ServiceRegistrar, srv InterviewServiceServer) {
	s.RegisterService(&InterviewService_ServiceDesc, srv)
}

func _InterviewService_AddInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).AddInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.InterviewService/AddInterview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).AddInterview(ctx, req.(*AddInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_GetInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).GetInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.InterviewService/GetInterview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).GetInterview(ctx, req.(*GetInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_GetAllInterviews_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserInterviewReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterviewServiceServer).GetAllInterviews(m, &interviewServiceGetAllInterviewsServer{stream})
}

type InterviewService_GetAllInterviewsServer interface {
	Send(*AddInterviewRequest) error
	grpc.ServerStream
}

type interviewServiceGetAllInterviewsServer struct {
	grpc.ServerStream
}

func (x *interviewServiceGetAllInterviewsServer) Send(m *AddInterviewRequest) error {
	return x.ServerStream.SendMsg(m)
}

// InterviewService_ServiceDesc is the grpc.ServiceDesc for InterviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.InterviewService",
	HandlerType: (*InterviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddInterview",
			Handler:    _InterviewService_AddInterview_Handler,
		},
		{
			MethodName: "GetInterview",
			Handler:    _InterviewService_GetInterview_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllInterviews",
			Handler:       _InterviewService_GetAllInterviews_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interview.proto",
}
