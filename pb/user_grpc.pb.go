// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserSignup(ctx context.Context, in *UserSignupRequest, opts ...grpc.CallOption) (*UserSignupResponse, error)
	UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserSignupResponse, error)
	AdminLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserSignupResponse, error)
	CreateProfile(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddCategory(ctx context.Context, in *AddCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveCategory(ctx context.Context, in *DeleteSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllCategory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (UserService_GetAllCategoryClient, error)
	AddSkillAdmin(ctx context.Context, in *AddSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSkillAdmin(ctx context.Context, in *DeleteSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddSkillUser(ctx context.Context, in *DeleteSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSkillUser(ctx context.Context, in *DeleteSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AdminUpdateSkill(ctx context.Context, in *SkillResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllSkills(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (UserService_GetAllSkillsClient, error)
	GetSkillById(ctx context.Context, in *GetSkillByIdRequest, opts ...grpc.CallOption) (*SkillResponse, error)
	GetAllSkillsUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (UserService_GetAllSkillsUserClient, error)
	AddLinkUser(ctx context.Context, in *AddLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteLinkUser(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllLinksUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (UserService_GetAllLinksUserClient, error)
	GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*UpdateCategoryRequest, error)
	GetUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserSignupResponse, error)
	JobApply(ctx context.Context, in *JobApplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserEditName(ctx context.Context, in *EditNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserEditPhone(ctx context.Context, in *EditPhoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserAddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserEditAddress(ctx context.Context, in *AddressResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserGetAddress(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*AddressResponse, error)
	UserUploadProfileImage(ctx context.Context, in *UserImageRequest, opts ...grpc.CallOption) (*UserImageResponse, error)
	UserGetProfilePic(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserImageResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserSignup(ctx context.Context, in *UserSignupRequest, opts ...grpc.CallOption) (*UserSignupResponse, error) {
	out := new(UserSignupResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/UserSignup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserSignupResponse, error) {
	out := new(UserSignupResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserSignupResponse, error) {
	out := new(UserSignupResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/AdminLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateProfile(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddCategory(ctx context.Context, in *AddCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/AddCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateCategory(ctx context.Context, in *UpdateCategoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveCategory(ctx context.Context, in *DeleteSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/RemoveCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllCategory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (UserService_GetAllCategoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/user.UserService/GetAllCategory", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllCategoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllCategoryClient interface {
	Recv() (*UpdateCategoryRequest, error)
	grpc.ClientStream
}

type userServiceGetAllCategoryClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllCategoryClient) Recv() (*UpdateCategoryRequest, error) {
	m := new(UpdateCategoryRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) AddSkillAdmin(ctx context.Context, in *AddSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/AddSkillAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteSkillAdmin(ctx context.Context, in *DeleteSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/DeleteSkillAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddSkillUser(ctx context.Context, in *DeleteSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/AddSkillUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteSkillUser(ctx context.Context, in *DeleteSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/DeleteSkillUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUpdateSkill(ctx context.Context, in *SkillResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/AdminUpdateSkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllSkills(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (UserService_GetAllSkillsClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], "/user.UserService/GetAllSkills", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllSkillsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllSkillsClient interface {
	Recv() (*SkillResponse, error)
	grpc.ClientStream
}

type userServiceGetAllSkillsClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllSkillsClient) Recv() (*SkillResponse, error) {
	m := new(SkillResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetSkillById(ctx context.Context, in *GetSkillByIdRequest, opts ...grpc.CallOption) (*SkillResponse, error) {
	out := new(SkillResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetSkillById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllSkillsUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (UserService_GetAllSkillsUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], "/user.UserService/GetAllSkillsUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllSkillsUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllSkillsUserClient interface {
	Recv() (*SkillResponse, error)
	grpc.ClientStream
}

type userServiceGetAllSkillsUserClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllSkillsUserClient) Recv() (*SkillResponse, error) {
	m := new(SkillResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) AddLinkUser(ctx context.Context, in *AddLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/AddLinkUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteLinkUser(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/DeleteLinkUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllLinksUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (UserService_GetAllLinksUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[3], "/user.UserService/GetAllLinksUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllLinksUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllLinksUserClient interface {
	Recv() (*LinkResponse, error)
	grpc.ClientStream
}

type userServiceGetAllLinksUserClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllLinksUserClient) Recv() (*LinkResponse, error) {
	m := new(LinkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdRequest, opts ...grpc.CallOption) (*UpdateCategoryRequest, error) {
	out := new(UpdateCategoryRequest)
	err := c.cc.Invoke(ctx, "/user.UserService/GetCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserSignupResponse, error) {
	out := new(UserSignupResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) JobApply(ctx context.Context, in *JobApplyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/JobApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserEditName(ctx context.Context, in *EditNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/UserEditName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserEditPhone(ctx context.Context, in *EditPhoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/UserEditPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/UserAddAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserEditAddress(ctx context.Context, in *AddressResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.UserService/UserEditAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserGetAddress(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/UserGetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserUploadProfileImage(ctx context.Context, in *UserImageRequest, opts ...grpc.CallOption) (*UserImageResponse, error) {
	out := new(UserImageResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/UserUploadProfileImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserGetProfilePic(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserImageResponse, error) {
	out := new(UserImageResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/UserGetProfilePic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	UserSignup(context.Context, *UserSignupRequest) (*UserSignupResponse, error)
	UserLogin(context.Context, *LoginRequest) (*UserSignupResponse, error)
	AdminLogin(context.Context, *LoginRequest) (*UserSignupResponse, error)
	CreateProfile(context.Context, *GetUserById) (*emptypb.Empty, error)
	AddCategory(context.Context, *AddCategoryRequest) (*emptypb.Empty, error)
	UpdateCategory(context.Context, *UpdateCategoryRequest) (*emptypb.Empty, error)
	RemoveCategory(context.Context, *DeleteSkillRequest) (*emptypb.Empty, error)
	GetAllCategory(*emptypb.Empty, UserService_GetAllCategoryServer) error
	AddSkillAdmin(context.Context, *AddSkillRequest) (*emptypb.Empty, error)
	DeleteSkillAdmin(context.Context, *DeleteSkillRequest) (*emptypb.Empty, error)
	AddSkillUser(context.Context, *DeleteSkillRequest) (*emptypb.Empty, error)
	DeleteSkillUser(context.Context, *DeleteSkillRequest) (*emptypb.Empty, error)
	AdminUpdateSkill(context.Context, *SkillResponse) (*emptypb.Empty, error)
	GetAllSkills(*emptypb.Empty, UserService_GetAllSkillsServer) error
	GetSkillById(context.Context, *GetSkillByIdRequest) (*SkillResponse, error)
	GetAllSkillsUser(*GetUserById, UserService_GetAllSkillsUserServer) error
	AddLinkUser(context.Context, *AddLinkRequest) (*emptypb.Empty, error)
	DeleteLinkUser(context.Context, *DeleteLinkRequest) (*emptypb.Empty, error)
	GetAllLinksUser(*GetUserById, UserService_GetAllLinksUserServer) error
	GetCategoryById(context.Context, *GetCategoryByIdRequest) (*UpdateCategoryRequest, error)
	GetUser(context.Context, *GetUserById) (*UserSignupResponse, error)
	JobApply(context.Context, *JobApplyRequest) (*emptypb.Empty, error)
	UserEditName(context.Context, *EditNameRequest) (*emptypb.Empty, error)
	UserEditPhone(context.Context, *EditPhoneRequest) (*emptypb.Empty, error)
	UserAddAddress(context.Context, *AddAddressRequest) (*emptypb.Empty, error)
	UserEditAddress(context.Context, *AddressResponse) (*emptypb.Empty, error)
	UserGetAddress(context.Context, *GetUserById) (*AddressResponse, error)
	UserUploadProfileImage(context.Context, *UserImageRequest) (*UserImageResponse, error)
	UserGetProfilePic(context.Context, *GetUserById) (*UserImageResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UserSignup(context.Context, *UserSignupRequest) (*UserSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignup not implemented")
}
func (UnimplementedUserServiceServer) UserLogin(context.Context, *LoginRequest) (*UserSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServiceServer) AdminLogin(context.Context, *LoginRequest) (*UserSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedUserServiceServer) CreateProfile(context.Context, *GetUserById) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedUserServiceServer) AddCategory(context.Context, *AddCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCategory not implemented")
}
func (UnimplementedUserServiceServer) UpdateCategory(context.Context, *UpdateCategoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedUserServiceServer) RemoveCategory(context.Context, *DeleteSkillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCategory not implemented")
}
func (UnimplementedUserServiceServer) GetAllCategory(*emptypb.Empty, UserService_GetAllCategoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllCategory not implemented")
}
func (UnimplementedUserServiceServer) AddSkillAdmin(context.Context, *AddSkillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkillAdmin not implemented")
}
func (UnimplementedUserServiceServer) DeleteSkillAdmin(context.Context, *DeleteSkillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkillAdmin not implemented")
}
func (UnimplementedUserServiceServer) AddSkillUser(context.Context, *DeleteSkillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSkillUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteSkillUser(context.Context, *DeleteSkillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkillUser not implemented")
}
func (UnimplementedUserServiceServer) AdminUpdateSkill(context.Context, *SkillResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateSkill not implemented")
}
func (UnimplementedUserServiceServer) GetAllSkills(*emptypb.Empty, UserService_GetAllSkillsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllSkills not implemented")
}
func (UnimplementedUserServiceServer) GetSkillById(context.Context, *GetSkillByIdRequest) (*SkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkillById not implemented")
}
func (UnimplementedUserServiceServer) GetAllSkillsUser(*GetUserById, UserService_GetAllSkillsUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllSkillsUser not implemented")
}
func (UnimplementedUserServiceServer) AddLinkUser(context.Context, *AddLinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLinkUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteLinkUser(context.Context, *DeleteLinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLinkUser not implemented")
}
func (UnimplementedUserServiceServer) GetAllLinksUser(*GetUserById, UserService_GetAllLinksUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllLinksUser not implemented")
}
func (UnimplementedUserServiceServer) GetCategoryById(context.Context, *GetCategoryByIdRequest) (*UpdateCategoryRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserById) (*UserSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) JobApply(context.Context, *JobApplyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobApply not implemented")
}
func (UnimplementedUserServiceServer) UserEditName(context.Context, *EditNameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEditName not implemented")
}
func (UnimplementedUserServiceServer) UserEditPhone(context.Context, *EditPhoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEditPhone not implemented")
}
func (UnimplementedUserServiceServer) UserAddAddress(context.Context, *AddAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddAddress not implemented")
}
func (UnimplementedUserServiceServer) UserEditAddress(context.Context, *AddressResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEditAddress not implemented")
}
func (UnimplementedUserServiceServer) UserGetAddress(context.Context, *GetUserById) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetAddress not implemented")
}
func (UnimplementedUserServiceServer) UserUploadProfileImage(context.Context, *UserImageRequest) (*UserImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUploadProfileImage not implemented")
}
func (UnimplementedUserServiceServer) UserGetProfilePic(context.Context, *GetUserById) (*UserImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetProfilePic not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UserSignup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserSignup(ctx, req.(*UserSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/AdminLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateProfile(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/AddCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddCategory(ctx, req.(*AddCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateCategory(ctx, req.(*UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/RemoveCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveCategory(ctx, req.(*DeleteSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllCategory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllCategory(m, &userServiceGetAllCategoryServer{stream})
}

type UserService_GetAllCategoryServer interface {
	Send(*UpdateCategoryRequest) error
	grpc.ServerStream
}

type userServiceGetAllCategoryServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllCategoryServer) Send(m *UpdateCategoryRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_AddSkillAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddSkillAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/AddSkillAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddSkillAdmin(ctx, req.(*AddSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteSkillAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteSkillAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/DeleteSkillAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteSkillAdmin(ctx, req.(*DeleteSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddSkillUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddSkillUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/AddSkillUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddSkillUser(ctx, req.(*DeleteSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteSkillUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteSkillUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/DeleteSkillUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteSkillUser(ctx, req.(*DeleteSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUpdateSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUpdateSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/AdminUpdateSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUpdateSkill(ctx, req.(*SkillResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllSkills_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllSkills(m, &userServiceGetAllSkillsServer{stream})
}

type UserService_GetAllSkillsServer interface {
	Send(*SkillResponse) error
	grpc.ServerStream
}

type userServiceGetAllSkillsServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllSkillsServer) Send(m *SkillResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_GetSkillById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkillByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSkillById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetSkillById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSkillById(ctx, req.(*GetSkillByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllSkillsUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserById)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllSkillsUser(m, &userServiceGetAllSkillsUserServer{stream})
}

type UserService_GetAllSkillsUserServer interface {
	Send(*SkillResponse) error
	grpc.ServerStream
}

type userServiceGetAllSkillsUserServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllSkillsUserServer) Send(m *SkillResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_AddLinkUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddLinkUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/AddLinkUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddLinkUser(ctx, req.(*AddLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteLinkUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteLinkUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/DeleteLinkUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteLinkUser(ctx, req.(*DeleteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllLinksUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserById)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllLinksUser(m, &userServiceGetAllLinksUserServer{stream})
}

type UserService_GetAllLinksUserServer interface {
	Send(*LinkResponse) error
	grpc.ServerStream
}

type userServiceGetAllLinksUserServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllLinksUserServer) Send(m *LinkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCategoryById(ctx, req.(*GetCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_JobApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).JobApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/JobApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).JobApply(ctx, req.(*JobApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserEditName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserEditName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UserEditName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserEditName(ctx, req.(*EditNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserEditPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserEditPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UserEditPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserEditPhone(ctx, req.(*EditPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UserAddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAddAddress(ctx, req.(*AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserEditAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserEditAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UserEditAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserEditAddress(ctx, req.(*AddressResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserGetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserGetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UserGetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserGetAddress(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserUploadProfileImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserUploadProfileImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UserUploadProfileImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserUploadProfileImage(ctx, req.(*UserImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserGetProfilePic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserGetProfilePic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UserGetProfilePic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserGetProfilePic(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserSignup",
			Handler:    _UserService_UserSignup_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserService_UserLogin_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _UserService_AdminLogin_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _UserService_CreateProfile_Handler,
		},
		{
			MethodName: "AddCategory",
			Handler:    _UserService_AddCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _UserService_UpdateCategory_Handler,
		},
		{
			MethodName: "RemoveCategory",
			Handler:    _UserService_RemoveCategory_Handler,
		},
		{
			MethodName: "AddSkillAdmin",
			Handler:    _UserService_AddSkillAdmin_Handler,
		},
		{
			MethodName: "DeleteSkillAdmin",
			Handler:    _UserService_DeleteSkillAdmin_Handler,
		},
		{
			MethodName: "AddSkillUser",
			Handler:    _UserService_AddSkillUser_Handler,
		},
		{
			MethodName: "DeleteSkillUser",
			Handler:    _UserService_DeleteSkillUser_Handler,
		},
		{
			MethodName: "AdminUpdateSkill",
			Handler:    _UserService_AdminUpdateSkill_Handler,
		},
		{
			MethodName: "GetSkillById",
			Handler:    _UserService_GetSkillById_Handler,
		},
		{
			MethodName: "AddLinkUser",
			Handler:    _UserService_AddLinkUser_Handler,
		},
		{
			MethodName: "DeleteLinkUser",
			Handler:    _UserService_DeleteLinkUser_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _UserService_GetCategoryById_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "JobApply",
			Handler:    _UserService_JobApply_Handler,
		},
		{
			MethodName: "UserEditName",
			Handler:    _UserService_UserEditName_Handler,
		},
		{
			MethodName: "UserEditPhone",
			Handler:    _UserService_UserEditPhone_Handler,
		},
		{
			MethodName: "UserAddAddress",
			Handler:    _UserService_UserAddAddress_Handler,
		},
		{
			MethodName: "UserEditAddress",
			Handler:    _UserService_UserEditAddress_Handler,
		},
		{
			MethodName: "UserGetAddress",
			Handler:    _UserService_UserGetAddress_Handler,
		},
		{
			MethodName: "UserUploadProfileImage",
			Handler:    _UserService_UserUploadProfileImage_Handler,
		},
		{
			MethodName: "UserGetProfilePic",
			Handler:    _UserService_UserGetProfilePic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllCategory",
			Handler:       _UserService_GetAllCategory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllSkills",
			Handler:       _UserService_GetAllSkills_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllSkillsUser",
			Handler:       _UserService_GetAllSkillsUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllLinksUser",
			Handler:       _UserService_GetAllLinksUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
