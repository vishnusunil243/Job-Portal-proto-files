// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: search.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	AddSearchHistory(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSearchHistory(ctx context.Context, in *UserId, opts ...grpc.CallOption) (SearchService_GetSearchHistoryClient, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) AddSearchHistory(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user.SearchService/AddSearchHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) GetSearchHistory(ctx context.Context, in *UserId, opts ...grpc.CallOption) (SearchService_GetSearchHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[0], "/user.SearchService/GetSearchHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchServiceGetSearchHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SearchService_GetSearchHistoryClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type searchServiceGetSearchHistoryClient struct {
	grpc.ClientStream
}

func (x *searchServiceGetSearchHistoryClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility
type SearchServiceServer interface {
	AddSearchHistory(context.Context, *SearchRequest) (*emptypb.Empty, error)
	GetSearchHistory(*UserId, SearchService_GetSearchHistoryServer) error
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (UnimplementedSearchServiceServer) AddSearchHistory(context.Context, *SearchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSearchHistory not implemented")
}
func (UnimplementedSearchServiceServer) GetSearchHistory(*UserId, SearchService_GetSearchHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSearchHistory not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_AddSearchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).AddSearchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.SearchService/AddSearchHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).AddSearchHistory(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_GetSearchHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).GetSearchHistory(m, &searchServiceGetSearchHistoryServer{stream})
}

type SearchService_GetSearchHistoryServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type searchServiceGetSearchHistoryServer struct {
	grpc.ServerStream
}

func (x *searchServiceGetSearchHistoryServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSearchHistory",
			Handler:    _SearchService_AddSearchHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSearchHistory",
			Handler:       _SearchService_GetSearchHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "search.proto",
}
